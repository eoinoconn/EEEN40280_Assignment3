<?xml version="1.0" encoding="utf-8"?>

<! Created by Barry Cardiff 14th Oct 2014, based on ARMCM0.svd -->
 
<device schemaVersion="1.1" xmlns:xs="http://www.w3.org/2001/XMLSchema-instance" xs:noNamespaceSchemaLocation="CMSIS-SVD_Schema_1_1.xsd" >
  <vendor>ARM Ltd.</vendor>                                       <!-- device vendor name -->
  <vendorID>ARM</vendorID>                                        <!-- device vendor short name -->
  <name>DES_M0_SoC</name>                                             <!-- name of part-->
  <series>ARMCM</series>                                          <!-- device series the device belongs to -->
  <version>1.2</version>                                          <!-- version of this description, adding CMSIS-SVD 1.1 tags -->
  <description>ARM 32-bit Cortex-M3 Microcontroller based device, CPU clock up to 80MHz, etc. </description>
  <licenseText>                                                   <!-- this license text will appear in header file. \n force line breaks -->
    ARM Limited (ARM) is supplying this software for use with Cortex-M\n
    processor based microcontroller, but can be equally used for other\n
    suitable  processor architectures. This file can be freely distributed.\n
    Modifications to this file shall be clearly marked.\n
    \n
    THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED\n
    OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF\n
    MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.\n
    ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR\n
    CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  </licenseText>
  <cpu>                                                           <!-- details about the cpu embedded in the device -->
    <name>CM0</name>
    <revision>r0p0</revision>
    <endian>little</endian>
    <mpuPresent>false</mpuPresent>
    <fpuPresent>false</fpuPresent>
    <nvicPrioBits>3</nvicPrioBits>
    <vendorSystickConfig>false</vendorSystickConfig>
  </cpu>
  <addressUnitBits>8</addressUnitBits>                            <!-- byte addressable memory -->
  <width>32</width>                                               <!-- bus width is 32 bits -->
  <!-- default settings implicitly inherited by subsequent sections -->
  <size>32</size>                                                 <!-- this is the default size (number of bits) of all peripherals
                                                                       and register that do not define "size" themselves -->
  <access>read-write</access>                                     <!-- default access permission for all subsequent registers -->
  <resetValue>0x00000000</resetValue>                             <!-- by default all bits of the registers are initialized to 0 on reset -->
  <resetMask>0xFFFFFFFF</resetMask>                               <!-- by default all 32Bits of the registers are used -->

	<peripherals>
	<!-- 
		<peripheral>
			<name>SysTick</name>
			<description>24Bit System Tick Timer for use in RTOS</description>
			<baseAddress>0xE000E010</baseAddress>

			<addressBlock>
				<offset>0</offset>
				<size>0x10</size>
				<usage>registers</usage>
			</addressBlock>

			<registers>
				<register>
					<name>CSR</name>
					<description>SysTick Control and Status Register</description>
					<addressOffset>0</addressOffset>
					<size>32</size>
					<resetValue>0x4</resetValue>
					<resetMask>0xFFFFFFFF</resetMask>
					<fields>
						<field>
							<name>ENABLE</name>
							<description>Enable SysTick Timer</description>
							<bitOffset>0</bitOffset>
							<bitWidth>1</bitWidth>
							<access>read-write</access>
							<enumeratedValues>
								<enumeratedValue>
									<name>0</name>
									<description>disabled</description>
									<value>0</value>
								</enumeratedValue>
								<enumeratedValue>
									<name>1</name>
									<description>enabled</description>
									<value>1</value>
								</enumeratedValue>
							</enumeratedValues>
						</field>
						<field>
							<name>TICKINT</name>
							<description>Generate Tick Interrupt</description>
							<bitOffset>1</bitOffset>
							<bitWidth>1</bitWidth>
							<access>read-write</access>
							<enumeratedValues>
								<enumeratedValue>
									<name>0</name>
									<description>Enable SysTick Exception</description>
									<value>0</value>
								</enumeratedValue>
								<enumeratedValue>
									<name>1</name>
									<description>Disable SysTick Exception</description>
									<value>1</value>
								</enumeratedValue>
							</enumeratedValues>
						</field>
						<field>
							<name>CLKSOURCE</name>
							<description>Source to count from</description>
							<bitOffset>2</bitOffset>
							<bitWidth>1</bitWidth>
							<access>read-write</access>
							<enumeratedValues>
								<enumeratedValue>
									<name>0</name>
									<description>External Clock</description>
									<value>0</value>
								</enumeratedValue>
								<enumeratedValue>
									<name>1</name>
									<description>CPU Clock</description>
									<value>1</value>
								</enumeratedValue>
							</enumeratedValues>
						</field>
						<field>
							<name>COUNTFLAG</name>
							<description>SysTick counted to zero</description>
							<bitOffset>16</bitOffset>
							<bitWidth>1</bitWidth>
							<access>read-write</access>
						</field>
					</fields>
				</register>
				<register>
					<name>RVR</name>
					<description>SysTick Reload Value Register</description>
					<addressOffset>0x4</addressOffset>
					<size>32</size>
					<resetValue>0</resetValue>
					<resetMask>0xFFFFFFFF</resetMask>
					<fields>
						<field>
							<name>RELOAD</name>
							<description>Value to auto reload SysTick after reaching zero</description>
							<bitOffset>0</bitOffset>
							<bitWidth>24</bitWidth>
							<access>read-write</access>
						</field>
					</fields>
				</register>
				<register>
					<name>CVR</name>
					<description>SysTick Current Value Register</description>
					<addressOffset>0x8</addressOffset>
					<size>32</size>
					<resetValue>0</resetValue>
					<resetMask>0xFFFFFFFF</resetMask>
					<fields>
						<field>
							<name>CURRENT</name>
							<description>Current value</description>
							<bitOffset>0</bitOffset>
							<bitWidth>24</bitWidth>
							<access>read-write</access>
						</field>
					</fields>
				</register>
				<register>
					<name>CALIB</name>
					<description>SysTick Calibration Value Register</description>
					<addressOffset>0xC</addressOffset>
					<size>32</size>
					<resetValue>0</resetValue>
					<resetMask>0xFFFFFFFF</resetMask>
					<fields>
						<field>
							<name>TENMS</name>
							<description>Reload value to use for 10ms timing</description>
							<bitOffset>0</bitOffset>
							<bitWidth>24</bitWidth>
							<access>read-only</access>
						</field>
						<field>
							<name>SKEW</name>
							<description>Clock Skew</description>
							<bitOffset>30</bitOffset>
							<bitWidth>1</bitWidth>
							<access>read-only</access>
							<enumeratedValues>
							<enumeratedValue>
							<name>0</name>
							<description>10ms calibration value is exact</description>
							<value>0</value>
							</enumeratedValue>
								<enumeratedValue>
									<name>1</name>
									<description>10ms calibration value is inexact, because of the clock frequency</description>
									<value>1</value>
								</enumeratedValue>
							</enumeratedValues>
						</field>
						<field>
							<name>NOREF</name>
							<description>No Ref</description>
							<bitOffset>31</bitOffset>
							<bitWidth>1</bitWidth>
							<access>read-only</access>
							<enumeratedValues>
								<enumeratedValue>
									<name>0</name>
									<description>Ref Clk available</description>
									<value>0</value>
								</enumeratedValue>
								<enumeratedValue>
									<name>1</name>
									<description>Ref Clk not available</description>
									<value>1</value>
								</enumeratedValue>
							</enumeratedValues>
						</field>
					</fields>
				</register>
			</registers>
		</peripheral>
    --> 
	
	<!-- 
		<peripheral>
			<name>WDT</name>
			<description>Watchdog Timer</description>
			<baseAddress>0x40001000</baseAddress>

			<addressBlock>
				<offset>0</offset>
				<size>0x10</size>
				<usage>registers</usage>
			</addressBlock>

			<interrupt>
				<name>WDT</name>
				<value>1</value>
			</interrupt>

			<registers>
				<register>
					<name>CSR</name>
					<description>Watchdog Control and Status Register</description>
					<addressOffset>0</addressOffset>
					<size>32</size>
					<resetValue>0x4</resetValue>
					<resetMask>0xFFFFFFFF</resetMask>
				</register>
			</registers>
		</peripheral>
	-->



	
		<peripheral>
			<name>UART</name>
			<description>UART, designed by Brian Mulkeen</description>
			<groupName>UART</groupName>
			<baseAddress>0x51000000</baseAddress>
			<addressBlock>
				<offset>0</offset>
				<size>0x100</size>
				<usage>registers</usage>
			</addressBlock>
			
			<registers>
				<register>														
					<name>RxData</name>													
					<description>Receiver Data Register. Contains the most recently received character.</description>													
					<addressOffset>0x000</addressOffset>													
					<access>read-write</access>													
					<resetValue>0</resetValue>													
					<resetMask>0x00</resetMask>
					<fields>													
						<field>												
							<name>Data</name>											
							<description>Received byte (not buffered)</description>											
							<bitRange>[7:0]</bitRange>											
						</field>
					</fields>													
				</register>														
				
				<register>														
					<name>TxData</name>													
					<description>Transmit Data Register. The next character to be transmitted is written here.</description>
					<addressOffset>0x004</addressOffset>													
					<access>read-write</access>													
					<resetValue>0</resetValue>													
					<resetMask>0x00</resetMask>	
					<fields>													
						<field>												
							<name>Data</name>											
							<description>Transmit Holding Register. Writing to this Register causes the data to be transmitted.</description>											
							<bitRange>[7:0]</bitRange>											
						</field>												
					</fields>													
				</register>
				
				<register>														
					<name>SR</name>													
					<description>UART status register.</description>
					<addressOffset>0x008</addressOffset>													
					<access>read-write</access>													
					<resetValue>0x00</resetValue>													
					<resetMask>0x00</resetMask>													
					<fields>													
						<field>												
							<name>TxFull</name>											
							<description>Logic 1 the UART Tx buffer is full (no more data please).</description>											
							<bitOffset>0</bitOffset>
							<bitWidth>1</bitWidth>
						</field>
						<field>												
							<name>TxEmpty</name>											
							<description>Logic 1 the UART Tx buffer is empty (more data please).</description>											
							<bitOffset>1</bitOffset>
							<bitWidth>1</bitWidth>
						</field>
						<field>												
							<name>RxFull</name>											
							<description>Logic 1 when there is data available in UART Rx register.</description>											
							<bitOffset>2</bitOffset>
							<bitWidth>1</bitWidth>
						</field>
						<field>												
							<name>RxEmpty</name>											
							<description>Logic 1 indicates no data in UART Rx register.</description>											
							<bitOffset>3</bitOffset>
							<bitWidth>1</bitWidth>
						</field>
					</fields>													
				</register>														
				<register>														
					<name>CR</name>													
					<description>UART control register.</description>
					<addressOffset>0x00C</addressOffset>													
					<access>read-write</access>													
					<resetValue>0x00</resetValue>													
					<resetMask>0x00</resetMask>													
					<fields>													
						<field>												
							<name>TxFull</name>											
							<description>Interrupt enable for the UART Tx buffer full signal.</description>											
							<bitOffset>0</bitOffset>
							<bitWidth>1</bitWidth>
						</field>
						<field>												
							<name>TxEmpty</name>											
							<description>Interrupt enable for the UART Tx buffer empty signal.</description>											
							<bitOffset>1</bitOffset>
							<bitWidth>1</bitWidth>
						</field>
						<field>												
							<name>RxFull</name>											
							<description>Interrupt enable for the data available in UART Rx register signal.</description>											
							<bitOffset>2</bitOffset>
							<bitWidth>1</bitWidth>
						</field>
						<field>												
							<name>RxEmpty</name>											
							<description>Interrupt enable for the no data in UART Rx register signal.</description>											
							<bitOffset>3</bitOffset>
							<bitWidth>1</bitWidth>
						</field>
					</fields>													
				</register>														

			</registers>
		</peripheral>
		
		<peripheral>
			<name>GPIO</name>
			<description>GPIO, designed by Brian Mulkeen</description>
			<groupName>GPIO</groupName>
			<baseAddress>0x50000000</baseAddress>
			<addressBlock>
				<offset>0</offset>
				<size>0x100</size>
				<usage>registers</usage>
			</addressBlock>
			
			
			<registers>
				<register>														
					<name>LED</name>													
					<description>Control (turn on / off) the row of LEDs on the board.</description>													
					<addressOffset>0x000</addressOffset>													
					<access>read-write</access>													
					<resetValue>0</resetValue>													
					<resetMask>0x000</resetMask>
					<fields>													
						<field>												
							<name>Data</name>											
							<description>bottom 12 bits go to the LEDs</description>											
							<bitRange>[11:0]</bitRange>											
						</field>
					</fields>													
				</register>														
				
				<register>														
					<name>Switches</name>													
					<description>Read the state (1 or 0) of the row of 16 switches on the board.</description>
					<addressOffset>0x008</addressOffset>													
					<access>read-write</access>													
					<resetValue>0</resetValue>													
					<resetMask>0x00</resetMask>	
					<fields>													
						<field>												
							<name>Data</name>											
							<description>Status of the switches.</description>											
							<bitRange>[15:0]</bitRange>											
						</field>												
					</fields>													
				</register>
				
				<register>														
					<name>Buttons</name>													
					<description>Read the state of various buttons.</description>
					<addressOffset>0x00C</addressOffset>													
					<access>read-write</access>													
					<resetValue>0x0000</resetValue>													
					<resetMask>0x0000</resetMask>													
					<fields>													
						<field>												
							<name>Data</name>											
							<description>Status of various buttons on the board.</description>											
							<bitRange>[15:0]</bitRange>											
						</field>
					</fields>													
				</register>														

			</registers>
		</peripheral>

		
		
		<peripheral>
			<name>NVIC</name>
			<description>NVIC, designed by Brian Mulkeen</description>
			<groupName>NVIC</groupName>
			<baseAddress>0xE000E100</baseAddress>
			<addressBlock>
				<offset>0</offset>
				<size>0x100</size>
				<usage>registers</usage>
			</addressBlock>
			
			
			<registers>
				<register>														
					<name>Enable</name>													
					<description>Write 1 to bits enables various interrupts.</description>													
					<addressOffset>0x000</addressOffset>													
					<access>read-write</access>													
					<resetValue>0</resetValue>													
					<resetMask>0x000</resetMask>
					<fields>													
						<field>												
							<name>Data</name>											
							<description>Write Logic 1 to a bit to enable</description>											
							<bitRange>[31:0]</bitRange>											
						</field>
					</fields>													
				</register>														
				
				<register>														
					<name>Disable</name>													
					<description>Write 1 to bits disables various interrupts.</description>													
					<addressOffset>0x080</addressOffset>													
					<access>read-write</access>													
					<resetValue>0</resetValue>													
					<resetMask>0x000</resetMask>
					<fields>													
						<field>												
							<name>Data</name>											
							<description>Write Logic 1 to a bit to disable</description>											
							<bitRange>[31:0]</bitRange>											
						</field>
					</fields>													
				</register>														

			</registers>
		</peripheral>

		

	</peripherals>
</device>
